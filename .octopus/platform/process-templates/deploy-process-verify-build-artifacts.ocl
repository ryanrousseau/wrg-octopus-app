name = "DSC - GitHub - Verify Build Artifacts - Docker"
description = <<-EOT
        This process template uses GitHub's CLI tooling to verify the attestations on packages that were built and published as part of your CI/CD pipeline.
        <br /><br />
        This process will use `docker login` to authenticate to Docker Hub prior to the attestation check.
        <br /><br />
        See [this blog post](https://octopus.com/blog/supply-chain-security-with-github-and-octopus-deploy) for more information.
        EOT

icon {
    color = "#1D63ED"
    id = "docker"
}

parameter "Template.SBOM.Artifact" {
    display_settings = {
        Octopus.ControlType = "Package"
    }
    help_text = "The package containing the SBOM artifact that was generated by the build server."
    label = "SBOM Package"
}

parameter "Template.Git.AuthToken" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = "The token of a user with permission to download build artifacts from GitHub."
    label = "GitHub Auth Token"
}

parameter "Template.Verify.WorkerPool" {
    display_settings = {
        Octopus.ControlType = "WorkerPool"
    }
    help_text = "**Required:** The worker pool on which these steps will execute."
    label = "Worker Pool"
}

parameter "Template.Verify.ExecutionContainerFeed" {
    display_settings = {
        Octopus.ControlType = "Feed"
    }
    help_text = "The `Docker Hub` feed to be used in which to pull the execution containers from."
    label = "Verify Container Feed"
}

parameter "Template.Docker.Account" {
    display_settings = {
        Octopus.ControlType = "UsernamePasswordAccount"
    }
    help_text = "The `Docker` account to use to authenticate when pulling container images."
    label = "Docker Account"
}

step "verify-configuration" {
    name = "Verify configuration"

    action {
        action_type = "Octopus.Script"
        is_required = true
        notes = "This step verifies the configuration parameters for the template."
        properties = {
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                function Check-Parameter
                {
                  param(
                    $value
                  )
                
                
                  if ([string]::IsNullOrWhiteSpace($OctopusParameters["Template.SBOM.Artifact"])) {
                    return $true
                  }
                
                  $matches = $value | Select-String -Pattern "#\{([^}]*)\}" -AllMatches
                
                  return $matches.Count -gt 0
                }
                
                
                if (Check-Parameter $OctopusParameters["Template.SBOM.Artifact"]) {
                  Fail-Step "SBOM Artifact is required."
                }
                
                if (Check-Parameter $OctopusParameters["Template.Git.AuthToken"]) {
                  Fail-Step "GitHub Auth Token is required."
                }
                
                if (Check-Parameter $OctopusParameters["Template.Verify.WorkerPool"]) {
                  Fail-Step "Worker Pool is required."
                }
                
                if (Check-Parameter $OctopusParameters["Template.Verify.ExecutionContainerFeed"]) {
                  Fail-Step "Execution Container Feed is required."
                }
                
                if (Check-Parameter $OctopusParameters["Template.Docker.Account"]) {
                  Fail-Step "Docker Account is required."
                }
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = "#{Template.Verify.WorkerPool}"

        container {
            feed = "#{Template.Verify.ExecutionContainerFeed}"
            image = "octopuslabs/github-workertools:latest"
        }
    }
}

step "attach-sbom-to-release" {
    name = "Attach SBOM to Release"

    action {
        action_type = "Octopus.Script"
        is_required = true
        notes = <<-EOT
                This step pulls the SBOM from the package and attaches it as a deployment artifact.
                EOT
        properties = {
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $OctopusEnvironmentName = $OctopusParameters["Octopus.Environment.Name"]
                $extractedPath = $OctopusParameters["Octopus.Action.Package[Template.SBOM.Artifact].ExtractedPath"]
                
                Write-Host "The SBOM extracted file path is this value $extractedPath"
                      
                $sbomFiles = Get-ChildItem -Path $extractedPath -Filter "*.json" -Recurse
                
                $sbom = $sbomFiles[0]
                Write-Host "Attaching $($sbom.FullName) as an artifacts"
                New-OctopusArtifact -Path $sbom.FullName -Name "$OctopusEnvironmentName.SBOM.JSON"
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = "#{Template.Verify.WorkerPool}"

        container {
            feed = "#{Template.Verify.ExecutionContainerFeed}"
            image = "octopuslabs/github-workertools:latest"
        }

        packages "Template.SBOM.Artifact" {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = ""
            properties = {
                Extract = "True"
                PackageParameterName = "Template.SBOM.Artifact"
                Purpose = ""
                SelectionMode = "deferred"
            }
        }
    }
}

step "verify-build-artifacts" {
    name = "Run Attestation Verification on Build Artifacts"
    start_trigger = "StartWithPrevious"

    action {
        action_type = "Octopus.Script"
        is_required = true
        notes = <<-EOT
                This step loops through the process's packages to verify their attestations using GitHub's CLI tooling.
                EOT
        properties = {
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $gitHubToken = $OctopusParameters["Template.Git.AuthToken"]
                
                $dockerUser = $OctopusParameters["Template.Docker.Account.Username"]
                $dockerPassword = $OctopusParameters["Template.Docker.Account.Password"]
                
                Write-Host "Logging into DockerHub with user $dockerUser"
                docker login --username $dockerUser --password $dockerPassword

                $buildInformation = $OctopusParameters["Octopus.Deployment.PackageBuildInformation"]
                $OctopusEnvironmentName = $OctopusParameters["Octopus.Environment.Name"]
                
                $objectArray = @()
                foreach ($key in $OctopusParameters.Keys)
                {
                  if ($key -like "*.PackageId")
                  {
                    Write-Host "Found a package Id parameter: $key - checking to see if it already is in the packages to verify"
                    
                    $packageId = $OctopusParameters[$key]
                    Write-Host "The package ID to check for is $packageId"
                
                    $packageVersionKey = $key -replace ".PackageId", ".PackageVersion"
                    Write-Host "The package version key is $packageVersionKey"
                    $packageVersion = $OctopusParameters[$packageVersionKey]
                    Write-Host "The package version is $packageVersion"
                
                    $packageVersionToVerify = "$($packageId):$($packageVersion)"
                
                    if ($objectArray -contains "$packageVersionToVerify")
                    {
                      Write-Host "$packageVersionToVerify already exists in the array"
                    }
                    else
                    {
                      Write-Host "$packageVersionToVerify does not exist - adding it"
                      $objectArray += $packageVersionToVerify
                    }    
                  }  
                }
                
                $buildInfoObject = ConvertFrom-Json $buildInformation
                $vcsRoot = $null
                
                Write-Host "Getting the repo name from build information"
                foreach ($packageItem in $objectArray)
                {
                  $artifactToCompare = $packageItem.Trim().Split(':')
                  $packageVersion = $artifactToCompare[1]
                  
                  Write-Host "The version to look for is: $packageVersion"
                  
                  foreach ($package in $buildInfoObject)
                  {
                    Write-Host "Comparing $($package.Version) with $($packageVersion)"
                    if ($packageVersion -eq $package.Version)
                    {
                      Write-Host "Versions match, getting the build URL"    
                      $vcsRoot = $package.VcsRoot
                      Write-Host "The vcsRoot is $vcsRoot"    
                    }
                  }
                }
                
                if ($null -eq $vcsRoot)
                {
                  Write-Error "Unable to pull the build information URL from the Octopus Build information using supplied versions in $packageName.  Check that the build information has been supplied and try again."
                }
                
                $githubLessUrl = $vcsRoot -Replace "https://github.com/", ""
                
                $env:GITHUB_TOKEN = $gitHubToken
                
                foreach($packageItem in $objectArray)
                {    
                  Write-Host "Verifying $packageItem"
                  $artifactToCompare = $packageItem.Trim().Split(':')
                  $packageName = $artifactToCompare[0].Replace("/", "")
                  
                  if ($packageItem.Contains("/"))
                  {
                      $imageToAttest = "oci://$packageItem"
                
                      Write-Host "Attesting to $imageToAttest in the repo $githubLessUrl"
                      $attestation=gh attestation verify "$imageToAttest" --repo $githubLessUrl --format json 
                
                      if ($LASTEXITCODE -ne 0)
                      {
                         Write-Error "The attestation for $packageItem could not be verified"
                      }
                
                      Write-Highlight "$packageItem successfully passed attestation verification"
                      Write-Verbose $attestation
                
                      Write-Host "Writing the attest output to $packageName.$OctopusEnvironmentName.attestation.json"
                      New-Item -Name "$packageName.$OctopusEnvironmentName.attestation.json" -ItemType "File" -Value $attestation
                      New-OctopusArtifact -Path "$packageName.$OctopusEnvironmentName.attestation.json" -Name  "$packageName.$OctopusEnvironmentName.attestation.json"
                  }
                  else
                  {    
                    if (Test-Path "/octopus/Files/")
                    {
                      Write-Host "$artifactToCompare is a package from our local repo, getting the information from /octopus/Files/"
                      $zipFiles = Get-ChildItem -Path "/octopus/Files/" -Filter "*$($artifactToCompare[0])*$($artifactToCompare[1])@*.zip" -Recurse
                    }
                    else
                    {
                      Write-Host "$artifactToCompare is a package from our local repo, getting the information from /home/Octopus/Files"
                      $zipFiles = Get-ChildItem -Path "/home/Octopus/Files" -Filter "*$($artifactToCompare[0])*$($artifactToCompare[1])@*.zip" -Recurse
                    }
                
                    $artifactVerified = $false
                    foreach ($file in $zipFiles) 
                    {
                      if (test-path "$packageName.$OctopusEnvironmentName.attestation.json")
                      {
                        Continue
                      }
                      
                      Write-Host "Attesting to $($file.FullName) in the repo $githubLessUrl"
                      $attestation=gh attestation verify "$($file.FullName)" --repo $githubLessUrl --format json
                
                      if ($LASTEXITCODE -ne 0)
                      {
                         Write-Error "The attestation for $packageItem could not be verified"
                      }
                
                      Write-Highlight "$packageItem successfully passed attestation verification"
                      Write-Verbose $attestation
                      $artifactVerified = $true
                
                      Write-Host "Writing the attest output to $packageName.$OctopusEnvironmentName.attestation.json"
                      New-Item -Name "$packageName.$OctopusEnvironmentName.attestation.json" -ItemType "File" -Value $attestation
                      New-OctopusArtifact -Path "$packageName.$OctopusEnvironmentName.attestation.json" -Name  "$packageName.$OctopusEnvironmentName.attestation.json"
                    }
                
                    if ($artifactVerified -eq $false)
                    {
                      Write-Error "Unable to find a matching zip file for $packageItem to verify the attestation."
                    }
                  }  
                }
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = "#{Template.Verify.WorkerPool}"

        container {
            feed = "#{Template.Verify.ExecutionContainerFeed}"
            image = "octopuslabs/github-workertools:latest"
        }
    }
}