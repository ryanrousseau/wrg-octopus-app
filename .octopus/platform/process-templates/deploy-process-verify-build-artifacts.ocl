name = "Deploy Process - Attach SBOM and Verify Build Artifacts"
description = "A process template that attaches the SBOM to the deployment and compares the SHA256 hashes of the build artifacts."

icon {
    color = "#173B56"
    id = "box-fragile"
}

parameter "Template.SBOM.Artifact" {
    display_settings = {
        Octopus.ControlType = "Package"
    }
    help_text = "The package containing the SBOM artifact that was generated by the build server.  "
    label = "SBOM Package"
}

parameter "Template.Git.AuthToken" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = "The token of a user with permission to download build artifacts from GitHub."
    label = "GitHub Auth Token"
}

parameter "Template.Verify.WorkerPool" {
    display_settings = {
        Octopus.ControlType = "WorkerPool"
    }
    help_text = "**Required:** The worker pool on which these steps will execute."
    label = "Worker Pool"
}

parameter "Template.Verify.ExecutionContainerFeed" {
    display_settings = {
        Octopus.ControlType = "Feed"
    }
    help_text = "The `DockerHub` to be used in which to pull the execution containers from."
    label = "Verify Container Feed"
}

parameter "Template.Docker.Account" {
    display_settings = {
        Octopus.ControlType = "UsernamePasswordAccount"
    }
    help_text = ""
    label = "Docker Account"
}

step "attach-sbom-to-release" {
    name = "Attach SBOM to Release"

    action {
        action_type = "Octopus.Script"
        is_required = true
        notes = <<-EOT
                **Always Runs**
                
                Will pull the SBOM from the package and attach it as a deployment artifact.
                EOT
        properties = {
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $OctopusEnvironmentName = $OctopusParameters["Octopus.Environment.Name"]
                $extractedPath = $OctopusParameters["Octopus.Action.Package[Template.SBOM.Artifact].ExtractedPath"]
                
                Write-Host "The SBOM extracted file path is this value $extractedPath"
                      
                $sbomFiles = Get-ChildItem -Path $extractedPath -Filter "*.json" -Recurse
                
                foreach ($sbom in $sbomFiles)
                {
                  Write-Host "Attaching $($sbom.FullName) as an artifacts"
                  New-OctopusArtifact -Path $sbom.FullName -Name "$OctopusEnvironmentName.SBOM.JSON"
                
                  break
                } 
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = "#{Template.Verify.WorkerPool}"

        container {
            feed = "#{Template.Verify.ExecutionContainerFeed}"
            image = "octopuslabs/github-workertools:latest"
        }

        packages "Template.SBOM.Artifact" {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = ""
            properties = {
                Extract = "True"
                PackageParameterName = "Template.SBOM.Artifact"
                Purpose = ""
                SelectionMode = "deferred"
            }
        }
    }
}

step "verify-docker-containers" {
    name = "Run Attestation Verification on Build Artifacts - old"
    start_trigger = "StartWithPrevious"

    action {
        action_type = "Octopus.Script"
        is_required = true
        notes = <<-EOT
                **Always Runs**
                
                Will loop through the list of provided Docker containers and packages to verify their attestations using GitHub's CLI tooling.
                EOT
        properties = {
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $gitHubToken = $OctopusParameters["Template.Git.AuthToken"]
                
                $dockerUser = $OctopusParameters["Template.Docker.Account.Username"]
                $dockerPassword = $OctopusParameters["Template.Docker.Account.Password"]
                
                Write-Host "Docker user: $dockerUser"
                Write-Host "Docker password: $dockerPassword"
                
                $buildInformation = $OctopusParameters["Octopus.Deployment.PackageBuildInformation"]
                $OctopusEnvironmentName = $OctopusParameters["Octopus.Environment.Name"]
                
                $objectArray = @()
                foreach ($key in $OctopusParameters.Keys)
                {
                  if ($key -like "*.PackageId")
                  {
                    Write-Host "Found a package Id parameter: $key - checking to see if it already is in the packages to verify"
                    
                    $packageId = $OctopusParameters[$key]
                    Write-Host "The package ID to check for is $packageId"
                
                    $packageVersionKey = $key -replace ".PackageId", ".PackageVersion"
                    Write-Host "The package version key is $packageVersionKey"
                    $packageVersion = $OctopusParameters[$packageVersionKey]
                    Write-Host "The package version is $packageVersion"
                
                    $packageVersionToVerify = "$($packageId):$($packageVersion)"
                
                    if ($objectArray -contains "$packageVersionToVerify")
                    {
                      Write-Host "$packageVersionToVerify already exists in the array"
                    }
                    else
                    {
                      Write-Host "$packageVersionToVerify does not exist - adding it"
                      $objectArray += $packageVersionToVerify
                    }    
                  }  
                }
                
                $buildInfoObject = ConvertFrom-Json $buildInformation
                $vcsRoot = $null
                
                Write-Host "Getting the repo name from build information"
                foreach ($packageItem in $objectArray)
                {
                  $artifactToCompare = $packageItem.Trim().Split(':')
                  $packageVersion = $artifactToCompare[1]
                  
                  Write-Host "The version to look for is: $packageVersion"
                  
                  foreach ($package in $buildInfoObject)
                  {
                    Write-Host "Comparing $($package.Version) with $($packageVersion)"
                    if ($packageVersion -eq $package.Version)
                    {
                      Write-Host "Versions match, getting the build URL"    
                      $vcsRoot = $package.VcsRoot
                      Write-Host "The vcsRoot is $vcsRoot"    
                    }
                  }
                }
                
                if ($null -eq $vcsRoot)
                {
                  Write-Error "Unable to pull the build information URL from the Octopus Build information using supplied versions in $packageName.  Check that the build information has been supplied and try again."
                }
                
                $githubLessUrl = $vcsRoot -Replace "https://github.com/", ""
                
                $env:GITHUB_TOKEN = $gitHubToken
                
                foreach($packageItem in $objectArray)
                {    
                  Write-Host "Verifying $packageItem"
                  $artifactToCompare = $packageItem.Trim().Split(':')
                  $packageName = $artifactToCompare[0].Replace("/", "")
                  
                  if ($packageItem.Contains("/"))
                  {
                      $imageToAttest = "oci://$packageItem"
                
                      Write-Host "Attesting to $imageToAttest in the repo $githubLessUrl"
                      $attestation=gh attestation verify "$imageToAttest" --repo $githubLessUrl --format json 
                
                      if ($LASTEXITCODE -ne 0)
                      {
                         Write-Error "The attestation for $packageItem could not be verified"
                      }
                
                      Write-Highlight "$packageItem successfully passed attestation verification"
                      Write-Verbose $attestation
                
                      Write-Host "Writing the attest output to $packageName.$OctopusEnvironmentName.attestation.json"
                      New-Item -Name "$packageName.$OctopusEnvironmentName.attestation.json" -ItemType "File" -Value $attestation
                      New-OctopusArtifact -Path "$packageName.$OctopusEnvironmentName.attestation.json" -Name  "$packageName.$OctopusEnvironmentName.attestation.json"
                  }
                  else
                  {    
                    if (Test-Path "/octopus/Files/")
                    {
                      Write-Host "$artifactToCompare is a package from our local repo, getting the information from /octopus/Files/"
                      $zipFiles = Get-ChildItem -Path "/octopus/Files/" -Filter "*$($artifactToCompare[0])*$($artifactToCompare[1])@*.zip" -Recurse
                    }
                    else
                    {
                      Write-Host "$artifactToCompare is a package from our local repo, getting the information from /home/Octopus/Files"
                      $zipFiles = Get-ChildItem -Path "/home/Octopus/Files" -Filter "*$($artifactToCompare[0])*$($artifactToCompare[1])@*.zip" -Recurse
                    }
                
                    $artifactVerified = $false
                    foreach ($file in $zipFiles) 
                    {
                      if (test-path "$packageName.$OctopusEnvironmentName.attestation.json")
                      {
                        Continue
                      }
                      
                      Write-Host "Attesting to $($file.FullName) in the repo $githubLessUrl"
                      $attestation=gh attestation verify "$($file.FullName)" --repo $githubLessUrl --format json
                
                      if ($LASTEXITCODE -ne 0)
                      {
                         Write-Error "The attestation for $packageItem could not be verified"
                      }
                
                      Write-Highlight "$packageItem successfully passed attestation verification"
                      Write-Verbose $attestation
                      $artifactVerified = $true
                
                      Write-Host "Writing the attest output to $packageName.$OctopusEnvironmentName.attestation.json"
                      New-Item -Name "$packageName.$OctopusEnvironmentName.attestation.json" -ItemType "File" -Value $attestation
                      New-OctopusArtifact -Path "$packageName.$OctopusEnvironmentName.attestation.json" -Name  "$packageName.$OctopusEnvironmentName.attestation.json"
                    }
                
                    if ($artifactVerified -eq $false)
                    {
                      Write-Error "Unable to find a matching zip file for $packageItem to verify the attestation."
                    }
                  }  
                }
                
                
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = "#{Template.Verify.WorkerPool}"

        container {
            feed = "#{Template.Verify.ExecutionContainerFeed}"
            image = "octopuslabs/github-workertools:latest"
        }
    }
}

step "run-attestation-verification-on-build-artifacts" {
    name = "Run Attestation Verification on Build Artifacts"

    action {
        action_type = "Octopus.AwsRunScript"
        is_disabled = true
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.Region = "us-west-2"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "#{Template.AWS.Account}"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $gitHubToken = $OctopusParameters["Template.Git.AuthToken"]
                
                $buildInformation = $OctopusParameters["Octopus.Deployment.PackageBuildInformation"]
                $OctopusEnvironmentName = $OctopusParameters["Octopus.Environment.Name"]
                
                aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin 381713788115.dkr.ecr.us-west-2.amazonaws.com
                
                $objectArray = @()
                foreach ($key in $OctopusParameters.Keys)
                {
                  if ($key -like "*.PackageId")
                  {
                    Write-Host "Found a package Id parameter: $key - checking to see if it already is in the packages to verify"
                    
                    $packageId = $OctopusParameters[$key]
                    Write-Host "The package ID to check for is $packageId"
                
                    $packageVersionKey = $key -replace ".PackageId", ".PackageVersion"
                    Write-Host "The package version key is $packageVersionKey"
                    $packageVersion = $OctopusParameters[$packageVersionKey]
                    Write-Host "The package version is $packageVersion"
                
                    $packageRegistryKey = $key -replace ".PackageId", ".Registry"
                    Write-Host "The package registry key is $packageRegistryKey"
                    $packageRegistry = $OctopusParameters[$packageRegistryKey]
                    Write-Host "The package registry is $packageRegistry"
                
                    $packageVersionToVerify = "$($packageId):$($packageVersion)"
                
                    if (-not [string]::IsNullOrEmpty($packageRegistry)) {
                      $packageVersionToVerify = "$packageRegistry/$packageVersionToVerify"
                    }
                
                    if ($objectArray -contains "$packageVersionToVerify")
                    {
                      Write-Host "$packageVersionToVerify already exists in the array"
                    }
                    else
                    {
                      Write-Host "$packageVersionToVerify does not exist - adding it"
                      $objectArray += $packageVersionToVerify
                    }    
                  }  
                }
                
                $buildInfoObject = ConvertFrom-Json $buildInformation
                $vcsRoot = $null
                
                Write-Host "Getting the repo name from build information"
                foreach ($packageItem in $objectArray)
                {
                  $artifactToCompare = $packageItem.Trim().Split(':')
                  $packageVersion = $artifactToCompare[1]
                  
                  Write-Host "The version to look for is: $packageVersion"
                  
                  foreach ($package in $buildInfoObject)
                  {
                    Write-Host "Comparing $($package.Version) with $($packageVersion)"
                    if ($packageVersion -eq $package.Version)
                    {
                      Write-Host "Versions match, getting the build URL"    
                      $vcsRoot = $package.VcsRoot
                      Write-Host "The vcsRoot is $vcsRoot"    
                    }
                  }
                }
                
                if ($null -eq $vcsRoot)
                {
                  Write-Error "Unable to pull the build information URL from the Octopus Build information using supplied versions in $packageName.  Check that the build information has been supplied and try again."
                }
                
                $githubLessUrl = $vcsRoot -Replace "https://github.com/", ""
                
                $env:GITHUB_TOKEN = $gitHubToken
                
                foreach($packageItem in $objectArray)
                {    
                  Write-Host "Verifying $packageItem"
                  $artifactToCompare = $packageItem.Trim().Split(':')
                  $packageName = $artifactToCompare[0].Replace("/", "")
                  
                  if ($packageItem.Contains("/"))
                  {
                      $imageToAttest = "oci://381713788115.dkr.ecr.us-west-2.amazonaws.com/$packageItem"
                
                      Write-Host "Attesting to $imageToAttest in the repo $githubLessUrl"
                      $attestation=gh attestation verify "$imageToAttest" --repo $githubLessUrl --format json 
                
                      if ($LASTEXITCODE -ne 0)
                      {
                         Write-Error "The attestation for $packageItem could not be verified"
                      }
                
                      Write-Highlight "$packageItem successfully passed attestation verification"
                      Write-Verbose $attestation
                
                      Write-Host "Writing the attest output to $packageName.$OctopusEnvironmentName.attestation.json"
                      New-Item -Name "$packageName.$OctopusEnvironmentName.attestation.json" -ItemType "File" -Value $attestation
                      New-OctopusArtifact -Path "$packageName.$OctopusEnvironmentName.attestation.json" -Name  "$packageName.$OctopusEnvironmentName.attestation.json"
                  }
                  else
                  {    
                    if (Test-Path "/octopus/Files/")
                    {
                      Write-Host "$artifactToCompare is a package from our local repo, getting the information from /octopus/Files/"
                      $zipFiles = Get-ChildItem -Path "/octopus/Files/" -Filter "*$($artifactToCompare[0])*$($artifactToCompare[1])@*.zip" -Recurse
                    }
                    else
                    {
                      Write-Host "$artifactToCompare is a package from our local repo, getting the information from /home/Octopus/Files"
                      $zipFiles = Get-ChildItem -Path "/home/Octopus/Files" -Filter "*$($artifactToCompare[0])*$($artifactToCompare[1])@*.zip" -Recurse
                    }
                
                    $artifactVerified = $false
                    foreach ($file in $zipFiles) 
                    {
                      if (test-path "$packageName.$OctopusEnvironmentName.attestation.json")
                      {
                        Continue
                      }
                      
                      Write-Host "Attesting to $($file.FullName) in the repo $githubLessUrl"
                      $attestation=gh attestation verify "$($file.FullName)" --repo $githubLessUrl --format json
                
                      if ($LASTEXITCODE -ne 0)
                      {
                         Write-Error "The attestation for $packageItem could not be verified"
                      }
                
                      Write-Highlight "$packageItem successfully passed attestation verification"
                      Write-Verbose $attestation
                      $artifactVerified = $true
                
                      Write-Host "Writing the attest output to $packageName.$OctopusEnvironmentName.attestation.json"
                      New-Item -Name "$packageName.$OctopusEnvironmentName.attestation.json" -ItemType "File" -Value $attestation
                      New-OctopusArtifact -Path "$packageName.$OctopusEnvironmentName.attestation.json" -Name  "$packageName.$OctopusEnvironmentName.attestation.json"
                    }
                
                    if ($artifactVerified -eq $false)
                    {
                      Write-Error "Unable to find a matching zip file for $packageItem to verify the attestation."
                    }
                  }  
                }
                
                
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = "#{Template.Verify.WorkerPool}"

        container {
            feed = "#{Template.Verify.ExecutionContainerFeed}"
            image = "octopuslabs/github-workertools:latest"
        }
    }
}