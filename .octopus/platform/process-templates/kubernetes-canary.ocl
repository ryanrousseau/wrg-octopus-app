name = "Kubernetes - Canary"
description = ""

icon {
    color = "#FFB867"
    id = "crow"
}

parameter "Template.Cluster.Namespace" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = "The namespace to deploy the application into"
    label = "Cluster namespace"

    value "" {}
}

parameter "Template.Deployment.Name" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = "The name of the deployment to create/update"
    label = "Deployment name"

    value "" {}
}

parameter "Template.Deployment.Replicas" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = ""
    label = "Replicas"

    value "3" {}
}

parameter "Template.Environment.Production" {
    display_settings = {
        Octopus.ControlType = "Environments"
    }
    help_text = ""
    label = "Production environment"
}

parameter "Template.Labels.Component" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = "The component label to add to the deployment and service definitions."
    label = "Component label"

    value "app" {}
}

parameter "Template.Service.Name" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = "The name of the service to create/update."
    label = "Service name"

    value "" {}
}

parameter "Template.Service.Port" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = "The port of the service to create/update."
    label = "Service port"

    value "8080" {}
}

parameter "Template.Service.PortName" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = "The name of port to create/update."
    label = "Service port name"

    value "http-port" {}
}

parameter "Template.Service.TargetPort" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = "The target port of the service to create/update."
    label = "Service target port"

    value "8080" {}
}

parameter "Template.Wait.Seconds" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = "The amount of time to wait after a canary phase."
    label = "Waiting period (seconds)"

    value "60" {}
}

parameter "Template.Tag" {
    display_settings = {
        Octopus.ControlType = "TargetTags"
    }
    help_text = ""
    label = "Cluster tag"
}

parameter "Template.Container" {
    display_settings = {
        Octopus.ControlType = "Package"
    }
    help_text = "The container to deploy"
    label = "App Container"
}

step "create-namespace-if-it-does-not-exist" {
    name = "Create namespace if it does not exist"
    properties = {
        Octopus.Action.TargetRoles = "octopub"
    }

    action {
        action_type = "Octopus.KubernetesRunScript"
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                # Set varaibles
                $clusterNamespace = $OctopusParameters["Template.Cluster.Namespace"]
                
                # Get existing namespaces
                Write-Host "Retrieving namespaces ..."
                $namespaces = (kubectl get namespaces -o JSON | ConvertFrom-Json)
                
                # Check to see if namespace exists
                if ($null -eq ($namespaces.Items | Where-Object {$_.metadata.name -eq $clusterNamespace}))
                {
                	# Create the namespace
                    Write-Host "Namespace $clusetrNamespace doesn't exist, creating ..."
                    kubectl create namespace $clusterNamespace
                }
                else
                {
                	Write-Host "Namespace $clusterNamespace already exists, moving on ..."
                }
                
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool_variable = ""
    }
}

step "create-service" {
    name = "Create service"
    properties = {
        Octopus.Action.TargetRoles = "octopub"
    }

    action {
        action_type = "Octopus.KubernetesDeployRawYaml"
        properties = {
            Octopus.Action.Kubernetes.DeploymentTimeout = "180"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.Kubernetes.ServerSideApply.Enabled = "True"
            Octopus.Action.Kubernetes.ServerSideApply.ForceConflicts = "True"
            Octopus.Action.KubernetesContainers.CustomResourceYaml = <<-EOT
                apiVersion: v1
                kind: Service
                metadata:
                  name: #{Template.Service.Name}
                  labels:
                    component: #{Template.Labels.Component}
                    type: main
                spec:
                  type: ClusterIP
                  selector:
                    component: #{Template.Labels.Component}
                  ports:
                    - port: #{Template.Service.Port}
                      targetPort: #{Template.Service.TargetPort}
                      name: #{Template.Service.PortName}
                
                EOT
            Octopus.Action.KubernetesContainers.CustomResourceYamlFileName = "template-scripts/kubernetes-canary/deploy-service.yml"
            Octopus.Action.KubernetesContainers.Namespace = "#{Template.Cluster.Namespace}"
            Octopus.Action.Script.ScriptSource = "Inline"
        }
        worker_pool_variable = ""
    }
}

step "scale-up-existing-deployment" {
    name = "Scale up existing deployment"
    properties = {
        Octopus.Action.TargetRoles = "octopub"
    }

    action {
        action_type = "Octopus.KubernetesRunScript"
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                $ErrorActionPreference = "Continue"
                
                $deployment = $OctopusParameters["Template.Deployment.Name"]
                $replicas = [int]$OctopusParameters["Template.Deployment.Replicas"]
                
                kubectl scale --current-replicas=$replicas --replicas=$(2 * $replicas) deployment/$deployment
                
                $LastExitCode = 0
                
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool_variable = ""
    }
}

step "deploy-canary-phase-1" {
    name = "Deploy canary phase 1"
    properties = {
        Octopus.Action.TargetRoles = "octopub"
    }

    action {
        action_type = "Octopus.KubernetesDeployRawYaml"
        properties = {
            Octopus.Action.Kubernetes.DeploymentTimeout = "180"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.Kubernetes.ServerSideApply.Enabled = "True"
            Octopus.Action.Kubernetes.ServerSideApply.ForceConflicts = "True"
            Octopus.Action.KubernetesContainers.CustomResourceYaml = <<-EOT
                apiVersion: apps/v1
                kind: Deployment
                metadata:
                  name: #{Template.Deployment.Name}-canary
                spec:
                  replicas: #{Template.Deployment.Replicas}
                  selector:
                    matchLabels:
                      component: #{Template.Labels.Component}
                      type: canary
                  template:
                    metadata:
                      labels:
                        component: #{Template.Labels.Component}
                        type: canary
                    spec:
                      containers:
                        - name: #{Template.Labels.Component}
                          image: #{Octopus.Action.Package[app-container].Image}
                          ports:
                            - containerPort: #{Template.Service.Port}
                              name: #{Template.Service.PortName}
                
                EOT
            Octopus.Action.KubernetesContainers.CustomResourceYamlFileName = "template-scripts/kubernetes-canary/canary-phase-1.yml"
            Octopus.Action.KubernetesContainers.Namespace = "#{Template.Cluster.Namespace}"
            Octopus.Action.Script.ScriptSource = "Inline"
        }
        worker_pool_variable = ""

        packages "app-container" {
            acquisition_location = "NotAcquired"
            feed = "docker-hub"
            package_id = ""
            properties = {
                Extract = "False"
                PackageParameterName = "Template.Container"
                Purpose = ""
                SelectionMode = "deferred"
            }
        }
    }
}

step "add-canary-pods-to-service" {
    name = "Add canary pods to service"
    properties = {
        Octopus.Action.TargetRoles = "octopub"
    }

    action {
        action_type = "Octopus.KubernetesDeployRawYaml"
        properties = {
            Octopus.Action.Kubernetes.DeploymentTimeout = "180"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.Kubernetes.ServerSideApply.Enabled = "True"
            Octopus.Action.Kubernetes.ServerSideApply.ForceConflicts = "True"
            Octopus.Action.KubernetesContainers.CustomResourceYaml = <<-EOT
                apiVersion: v1
                kind: Service
                metadata:
                  name: #{Template.Service.Name}
                  labels:
                    component: #{Template.Labels.Component}
                spec:
                  type: ClusterIP
                  selector:
                    component: #{Template.Labels.Component}
                  ports:
                    - port: #{Template.Service.Port}
                      targetPort: #{Template.Service.TargetPort}
                      name: #{Template.Service.PortName}
                
                EOT
            Octopus.Action.KubernetesContainers.CustomResourceYamlFileName = "template-scripts/kubernetes-canary/add-canary-pods-to-service.yml"
            Octopus.Action.KubernetesContainers.Namespace = "#{Template.Cluster.Namespace}"
            Octopus.Action.Script.ScriptSource = "Inline"
        }
        worker_pool_variable = ""
    }
}

step "canary-phase-1-waiting-period" {
    name = "Canary phase 1 waiting period"
    properties = {
        Octopus.Action.TargetRoles = "#{Template.Tag}"
    }

    action {
        action_type = "Octopus.Script"
        excluded_environments_variable = "#{Template.Environment.Production}"
        properties = {
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $seconds = $OctopusParameters["Template.Wait.Seconds"]
                
                Start-Sleep -Seconds $seconds
                
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool_variable = ""
    }
}

step "approve-canary-phase-1" {
    name = "Approve canary phase 1"

    action {
        action_type = "Octopus.Manual"
        environments_variable = "#{Template.Environment.Production}"
        properties = {
            Octopus.Action.Manual.BlockConcurrentDeployments = "True"
            Octopus.Action.Manual.Instructions = "Approve canary phase 1"
            Octopus.Action.RunOnServer = "false"
        }
    }
}

step "deploy-canary-phase-2" {
    name = "Deploy canary phase 2"
    properties = {
        Octopus.Action.TargetRoles = "octopub"
    }

    action {
        action_type = "Octopus.KubernetesRunScript"
        properties = {
            Octopus.Action.KubernetesContainers.Namespace = "#{Template.Cluster.Namespace}"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $deployment = $OctopusParameters["Template.Deployment.Name"] + "-canary"
                $replicas = [int]$OctopusParameters["Template.Deployment.Replicas"]
                
                kubectl scale --current-replicas=$replicas --replicas=$(2 * $replicas) deployment/$deployment
                
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool_variable = ""
    }
}

step "canary-phase-2-waiting-period" {
    name = "Canary phase 2 waiting period"
    properties = {
        Octopus.Action.TargetRoles = "#{Template.Tag}"
    }

    action {
        action_type = "Octopus.Script"
        excluded_environments_variable = "#{Template.Environment.Production}"
        properties = {
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $seconds = $OctopusParameters["Template.Wait.Seconds"]
                
                Start-Sleep -Seconds $seconds
                
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool_variable = ""
    }
}

step "approve-canary-phase-2" {
    name = "Approve canary phase 2"

    action {
        action_type = "Octopus.Manual"
        environments_variable = "#{Template.Environment.Production}"
        properties = {
            Octopus.Action.Manual.BlockConcurrentDeployments = "True"
            Octopus.Action.Manual.Instructions = "Approve canary phase 2"
            Octopus.Action.RunOnServer = "false"
        }
    }
}

step "deploy-canary-phase-3" {
    name = "Deploy canary phase 3"
    properties = {
        Octopus.Action.TargetRoles = "octopub"
    }

    action {
        action_type = "Octopus.KubernetesRunScript"
        properties = {
            Octopus.Action.KubernetesContainers.Namespace = "#{Template.Cluster.Namespace}"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $ErrorActionPreference = "Continue"
                
                $deployment = $OctopusParameters["Template.Deployment.Name"]
                $replicas = [int]$OctopusParameters["Template.Deployment.Replicas"]
                
                kubectl scale --current-replicas=$(2 * $replicas) --replicas=$replicas deployment/$deployment
                
                $LastExitCode = 0
                
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool_variable = ""
    }
}

step "canary-phase-3-waiting-period" {
    name = "Canary phase 3 waiting period"
    properties = {
        Octopus.Action.TargetRoles = "#{Template.Tag}"
    }

    action {
        action_type = "Octopus.Script"
        excluded_environments_variable = "#{Template.Environment.Production}"
        properties = {
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $seconds = $OctopusParameters["Template.Wait.Seconds"]
                
                Start-Sleep -Seconds $seconds
                
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool_variable = ""
    }
}

step "approve-canary-phase-3" {
    name = "Approve canary phase 3"

    action {
        action_type = "Octopus.Manual"
        environments_variable = "#{Template.Environment.Production}"
        properties = {
            Octopus.Action.Manual.BlockConcurrentDeployments = "True"
            Octopus.Action.Manual.Instructions = "Approve canary phase 2"
            Octopus.Action.RunOnServer = "false"
        }
    }
}

step "update-main" {
    name = "Update main deployment"
    properties = {
        Octopus.Action.TargetRoles = "octopub"
    }

    action {
        action_type = "Octopus.KubernetesDeployRawYaml"
        properties = {
            Octopus.Action.Kubernetes.DeploymentTimeout = "180"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.Kubernetes.ServerSideApply.Enabled = "True"
            Octopus.Action.Kubernetes.ServerSideApply.ForceConflicts = "True"
            Octopus.Action.KubernetesContainers.CustomResourceYaml = <<-EOT
                apiVersion: apps/v1
                kind: Deployment
                metadata:
                  name: #{Template.Deployment.Name}
                spec:
                  replicas: #{Template.Deployment.Replicas}
                  selector:
                    matchLabels:
                      component: #{Template.Labels.Component}
                      type: main
                  template:
                    metadata:
                      labels:
                        component: #{Template.Labels.Component}
                        type: main
                    spec:
                      containers:
                        - name: #{Template.Labels.Component}
                          image: #{Octopus.Action.Package[app-container].Image}
                          ports:
                            - containerPort: #{Template.Service.Port}
                              name: #{Template.Service.PortName}
                
                EOT
            Octopus.Action.KubernetesContainers.CustomResourceYamlFileName = "template-scripts/kubernetes-canary/deploy-main.yml"
            Octopus.Action.KubernetesContainers.Namespace = "#{Template.Cluster.Namespace}"
            Octopus.Action.Script.ScriptSource = "Inline"
        }
        worker_pool_variable = ""

        packages "app-container" {
            acquisition_location = "NotAcquired"
            feed = "octopus-server-built-in"
            package_id = ""
            properties = {
                Extract = "false"
                PackageParameterName = "Template.Container"
                Purpose = "DockerImageReference"
                SelectionMode = "deferred"
            }
        }
    }
}

step "remove-canary" {
    name = "Remove canary pods from service"
    properties = {
        Octopus.Action.TargetRoles = "octopub"
    }

    action {
        action_type = "Octopus.KubernetesDeployRawYaml"
        properties = {
            Octopus.Action.Kubernetes.DeploymentTimeout = "180"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.Kubernetes.ServerSideApply.Enabled = "True"
            Octopus.Action.Kubernetes.ServerSideApply.ForceConflicts = "True"
            Octopus.Action.KubernetesContainers.CustomResourceYaml = <<-EOT
                apiVersion: v1
                kind: Service
                metadata:
                  name: #{Template.Service.Name}
                  labels:
                    component: #{Template.Labels.Component}
                    type: main
                spec:
                  type: ClusterIP
                  selector:
                    component: #{Template.Labels.Component}
                  ports:
                    - port: #{Template.Service.Port}
                      targetPort: #{Template.Service.TargetPort}
                      name: #{Template.Service.PortName}
                
                EOT
            Octopus.Action.KubernetesContainers.CustomResourceYamlFileName = "template-scripts/kubernetes-canary/deploy-service.yml"
            Octopus.Action.KubernetesContainers.Namespace = "#{Template.Cluster.Namespace}"
            Octopus.Action.Script.ScriptSource = "Inline"
        }
        worker_pool_variable = ""
    }
}

step "delete-canary-deployment" {
    name = "Delete canary deployment"
    properties = {
        Octopus.Action.TargetRoles = "octopub"
    }

    action {
        action_type = "Octopus.KubernetesDeployRawYaml"
        properties = {
            Octopus.Action.Kubernetes.DeploymentTimeout = "180"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.Kubernetes.ServerSideApply.Enabled = "True"
            Octopus.Action.Kubernetes.ServerSideApply.ForceConflicts = "True"
            Octopus.Action.KubernetesContainers.CustomResourceYaml = <<-EOT
                apiVersion: apps/v1
                kind: Deployment
                metadata:
                  name: #{Template.Deployment.Name}-canary
                spec:
                  replicas: 0
                  selector:
                    matchLabels:
                      component: #{Template.Labels.Component}
                      type: canary
                  template:
                    metadata:
                      labels:
                        component: #{Template.Labels.Component}
                        type: canary
                    spec:
                      containers:
                        - name: #{Template.Labels.Component}
                          image: #{Octopus.Action.Package[app-container].Image}
                          ports:
                            - containerPort: #{Template.Service.Port}
                              name: #{Template.Service.PortName}
                
                EOT
            Octopus.Action.KubernetesContainers.CustomResourceYamlFileName = "template-scripts/kubernetes-canary/delete-canary-deployment.yml"
            Octopus.Action.KubernetesContainers.Namespace = "#{Template.Cluster.Namespace}"
            Octopus.Action.Script.ScriptSource = "Inline"
        }
        worker_pool_variable = ""

        packages "app-container" {
            acquisition_location = "NotAcquired"
            feed = "docker-hub"
            package_id = ""
            properties = {
                Extract = "False"
                PackageParameterName = "Template.Container"
                Purpose = ""
                SelectionMode = "deferred"
            }
        }
    }
}

step "detect-cancelled-canary" {
    condition = "Always"
    name = "Detect cancelled canary rollout"
    properties = {
        Octopus.Action.TargetRoles = "#{Template.Tag}"
    }

    action "detect-cancelled-canary-rollout" {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $ErrorActionPreference = "Continue"
                
                if ("#{Octopus.ProcessTemplate.Action[Approve canary phase 1].Output.Manual.Approved}" -ieq "false" -or
                	"#{Octopus.ProcessTemplate.Action[Approve canary phase 2].Output.Manual.Approved}" -ieq "false" -or
                	"#{Octopus.ProcessTemplate.Action[Approve canary phase 3].Output.Manual.Approved}" -ieq "false") {
                	Set-OctopusVariable -name "Cancelled" -value "True"
                    Write-Highlight "Deployment was cancelled by a manual intervention."
                } else {
                	Set-OctopusVariable -name "Cancelled" -value "False"
                    Write-Highlight "Deployment completed successfully, so no rollback required."
                }
                
                $LastExitCode = 0
                
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool_variable = ""
    }
}

step "rollback-canary-deployment" {
    condition = "Variable"
    name = "Rollback canary deployment"
    properties = {
        Octopus.Action.TargetRoles = "octopub"
        Octopus.Step.ConditionVariableExpression = "#{Octopus.ProcessTemplate.Action[Detect cancelled canary rollout].Output.Cancelled}"
    }

    action {
        action_type = "Octopus.KubernetesRunScript"
        properties = {
            Octopus.Action.KubernetesContainers.Namespace = "#{Template.Cluster.Namespace}"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $ErrorActionPreference = "Continue"
                
                if ("#{Octopus.Action[Detect cancelled canary rollout].Output.Cancelled}" -ieq "true") {
                
                	$deployment = $OctopusParameters["Template.Deployment.Name"]
                	$canary = $deployment + "-canary"
                
                	kubectl scale --current-replicas=3 --replicas=1 deployment/$deployment
                
                    kubectl delete deployment $canary
                }
                
                $LastExitCode = 0
                
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool_variable = ""
    }
}