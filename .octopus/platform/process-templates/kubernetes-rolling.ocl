name = "Kubernetes - Rolling"
description = ""

icon {
    color = "#AED0EB"
    id = "retweet"
}

parameter "Template.Cluster.Namespace" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = "The namespace to deploy the application into"
    label = "Cluster namespace"

    value "" {}
}

parameter "Template.Deployment.Name" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = "The name of the deployment to create/update"
    label = "Deployment name"

    value "" {}
}

parameter "Template.Deployment.Replicas" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = ""
    label = "Replicas"

    value "3" {}
}

parameter "Template.Environment.Production" {
    display_settings = {
        Octopus.ControlType = "Environments"
    }
    help_text = ""
    label = "Production environment"
}

parameter "Template.Labels.Component" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = "The component label to add to the deployment and service definitions."
    label = "Component label"

    value "app" {}
}

parameter "Template.Service.Name" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = "The name of the service to create/update."
    label = "Service name"

    value "" {}
}

parameter "Template.Service.Port" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = "The port of the service to create/update."
    label = "Service port"

    value "8080" {}
}

parameter "Template.Service.PortName" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = "The name of port to create/update."
    label = "Service port name"

    value "http-port" {}
}

parameter "Template.Service.TargetPort" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = "The target port of the service to create/update."
    label = "Service target port"

    value "8080" {}
}

parameter "Template.Tag" {
    display_settings = {
        Octopus.ControlType = "TargetTags"
    }
    help_text = ""
    label = "Cluster tag"
}

parameter "Template.Container" {
    display_settings = {
        Octopus.ControlType = "Package"
    }
    help_text = "The container to deploy"
    label = "App Container"
}

parameter "Template.WindowSize" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = ""
    label = "Rolling Window Size"
}

step "deploy-app" {
    name = "Deploy app"
    properties = {
        Octopus.Action.MaxParallelism = "#{Template.WindowSize}"
        Octopus.Action.TargetRoles = "#{Template.Tag}"
    }

    action "create-namespace-if-it-does-not-exist" {
        action_type = "Octopus.KubernetesRunScript"
        name = "Create namespace if it does not exist"
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                # Set varaibles
                $clusterNamespace = $OctopusParameters["Template.Cluster.Namespace"]
                
                # Get existing namespaces
                Write-Host "Retrieving namespaces ..."
                $namespaces = (kubectl get namespaces -o JSON | ConvertFrom-Json)
                
                # Check to see if namespace exists
                if ($null -eq ($namespaces.Items | Where-Object {$_.metadata.name -eq $clusterNamespace}))
                {
                	# Create the namespace
                    Write-Host "Namespace $clusetrNamespace doesn't exist, creating ..."
                    kubectl create namespace $clusterNamespace
                }
                else
                {
                	Write-Host "Namespace $clusterNamespace already exists, moving on ..."
                }
                
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool_variable = ""
    }

    action "apply-config-map" {
        action_type = "Octopus.KubernetesDeployRawYaml"
        name = "Apply config map"
        properties = {
            Octopus.Action.Kubernetes.DeploymentTimeout = "180"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.Kubernetes.ServerSideApply.Enabled = "True"
            Octopus.Action.Kubernetes.ServerSideApply.ForceConflicts = "True"
            Octopus.Action.KubernetesContainers.CustomResourceYaml = <<-EOT
                apiVersion: v1
                kind: ConfigMap
                metadata:
                  name: #{Template.Deployment.Name}-config-#{Octopus.Deployment.Id | ToLower}
                  namespace: #{Template.Cluster.Namespace}
                data:
                  OPEN_FEATURE_CLIENT_ID: #{Octopus.FeatureToggles.ClientIdentifier}
                  RELEASE: #{Octopus.Release.Number}
                  VERSION: #{Octopus.ProcessTemplate.Action[Apply deployment].Package[app-container].PackageVersion}
                
                EOT
            Octopus.Action.KubernetesContainers.Namespace = "#{Project.Cluster.Namespace}"
            Octopus.Action.Script.ScriptSource = "Inline"
        }
        worker_pool_variable = ""
    }

    action "apply-deployment" {
        action_type = "Octopus.KubernetesDeployRawYaml"
        name = "Apply deployment"
        properties = {
            Octopus.Action.Kubernetes.DeploymentTimeout = "180"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.Kubernetes.ServerSideApply.Enabled = "True"
            Octopus.Action.Kubernetes.ServerSideApply.ForceConflicts = "True"
            Octopus.Action.KubernetesContainers.CustomResourceYaml = <<-EOT
                apiVersion: apps/v1
                kind: Deployment
                metadata:
                  name: #{Template.Deployment.Name}
                spec:
                  replicas: #{Template.Deployment.Replicas}
                  selector:
                    matchLabels:
                      component: #{Template.Labels.Component}
                      type: main
                  template:
                    metadata:
                      labels:
                        component: #{Template.Labels.Component}
                        type: main
                    spec:
                      containers:
                        - name: #{Template.Labels.Component}
                          image: #{Octopus.Action.Package[app-container].Image}
                          ports:
                            - containerPort: #{Template.Service.Port}
                              name: #{Template.Service.PortName}
                          envFrom:
                            - configMapRef:
                                name: #{Template.Deployment.Name}-config-#{Octopus.Deployment.Id | ToLower}
                EOT
            Octopus.Action.KubernetesContainers.CustomResourceYamlFileName = "template-scripts/kubernetes-rolling/deployment.yml"
            Octopus.Action.KubernetesContainers.Namespace = "#{Project.Cluster.Namespace}"
            Octopus.Action.Script.ScriptSource = "Inline"
        }
        worker_pool_variable = ""

        packages "app-container" {
            acquisition_location = "NotAcquired"
            feed = "docker-hub"
            package_id = ""
            properties = {
                Extract = "False"
                PackageParameterName = "Template.Container"
                Purpose = ""
                SelectionMode = "deferred"
            }
        }
    }

    action "apply-service" {
        action_type = "Octopus.KubernetesDeployRawYaml"
        name = "Apply service"
        properties = {
            Octopus.Action.Kubernetes.DeploymentTimeout = "180"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.Kubernetes.ServerSideApply.Enabled = "True"
            Octopus.Action.Kubernetes.ServerSideApply.ForceConflicts = "True"
            Octopus.Action.KubernetesContainers.CustomResourceYaml = <<-EOT
                apiVersion: v1
                kind: Service
                metadata:
                  name: #{Template.Service.Name}
                  labels:
                    component: #{Template.Labels.Component}
                spec:
                  type: ClusterIP
                  selector:
                    component: #{Template.Labels.Component}
                  ports:
                    - port: #{Template.Service.Port}
                      targetPort: #{Template.Service.TargetPort}
                      name: #{Template.Service.PortName}
                EOT
            Octopus.Action.KubernetesContainers.CustomResourceYamlFileName = "template-scripts/kubernetes-rolling/service.yml"
            Octopus.Action.KubernetesContainers.Namespace = "#{Project.Cluster.Namespace}"
            Octopus.Action.Script.ScriptSource = "Inline"
        }
        worker_pool_variable = ""
    }
}