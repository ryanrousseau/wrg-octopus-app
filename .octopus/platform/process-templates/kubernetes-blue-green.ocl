name = "Kubernetes - Blue-Green"
description = ""

icon {
    color = "#0D80D8"
    id = "random"
}

parameter "Template.Cluster.Namespace" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = "The namespace to deploy the application into"
    label = "Cluster namespace"

    value "" {}
}

parameter "Template.Deployment.Name" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = "The name of the deployment to create/update"
    label = "Deployment name"

    value "" {}
}

parameter "Template.Deployment.PreviewReplicas" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = ""
    label = "PreviewReplicas"

    value "1" {}
}

parameter "Template.Deployment.Replicas" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = ""
    label = "Replicas"

    value "3" {}
}

parameter "Template.Environment.Production" {
    display_settings = {
        Octopus.ControlType = "Environments"
    }
    help_text = ""
    label = "Production environment"
}

parameter "Template.Labels.Component" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = "The component label to add to the deployment and service definitions."
    label = "Component label"

    value "app" {}
}

parameter "Template.Service.Name" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = "The name of the service to create/update."
    label = "Service name"

    value "" {}
}

parameter "Template.Service.PreviewPort" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = "The port of the service to create/update."
    label = "Preview service port"

    value "8090" {}
}

parameter "Template.Service.Port" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = "The port of the service to create/update."
    label = "Service port"

    value "8080" {}
}

parameter "Template.Container.PortName" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = "The name of port to create/update."
    label = "Service port name"

    value "http-port" {}
}

parameter "Template.Container.TargetPort" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = "The target port of the service to create/update."
    label = "Service target port"

    value "8080" {}
}

parameter "Template.Tag" {
    display_settings = {
        Octopus.ControlType = "TargetTags"
    }
    help_text = ""
    label = "Cluster tag"
}

parameter "Template.Container" {
    display_settings = {
        Octopus.ControlType = "Package"
    }
    help_text = "The container to deploy"
    label = "App Container"
}

parameter "Template.Wait.Seconds" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = "The amount of time to wait after a canary phase."
    label = "Waiting period (seconds)"

    value "60" {}
}

step "create-namespace-if-it-does-not-exist" {
    name = "Create namespace if it does not exist"
    properties = {
        Octopus.Action.TargetRoles = "#{Template.Tag}"
    }

    action {
        action_type = "Octopus.KubernetesRunScript"
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                # Set varaibles
                $clusterNamespace = $OctopusParameters["Template.Cluster.Namespace"]
                
                # Get existing namespaces
                Write-Host "Retrieving namespaces ..."
                $namespaces = (kubectl get namespaces -o JSON | ConvertFrom-Json)
                
                # Check to see if namespace exists
                if ($null -eq ($namespaces.Items | Where-Object {$_.metadata.name -eq $clusterNamespace}))
                {
                	# Create the namespace
                    Write-Host "Namespace $clusetrNamespace doesn't exist, creating ..."
                    kubectl create namespace $clusterNamespace
                }
                else
                {
                	Write-Host "Namespace $clusterNamespace already exists, moving on ..."
                }
                
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool_variable = ""
    }
}

step "get-active-deployment" {
    name = "Get active deployment"
    properties = {
        Octopus.Action.TargetRoles = "#{Template.Tag}"
    }

    action {
        action_type = "Octopus.KubernetesRunScript"
        properties = {
            Octopus.Action.KubernetesContainers.Namespace = "#{Template.Cluster.Namespace}"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $deploymentName = $OctopusParameters["Template.Deployment.Name"]
                $serviceName = $OctopusParameters["Template.Service.Name"]
                
                $deploymentId = $(kubectl get service $serviceName -o json | jq -r '.spec.selector.deployment')
                
                $foundActiveDeployment = -not ($deploymentId -eq $null)
                
                if ($foundActiveDeployment) {
                    $deployment = $deploymentName + "-" + $deploymentId.ToLower()
                    Write-Verbose "Found previous deployment: $deployment"
                    Set-OctopusVariable -name "PreviousDeployment" -value $deployment
                } else {
                    Write-Warning "Did not find an existing deployment"
                }
                
                Set-OctopusVariable -name "FoundActiveDeployment" -value $foundActiveDeployment
                
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool_variable = ""
    }
}

step "create-deployment" {
    name = "Create deployment"
    properties = {
        Octopus.Action.TargetRoles = "#{Template.Tag}"
    }

    action {
        action_type = "Octopus.KubernetesDeployRawYaml"
        properties = {
            Octopus.Action.Kubernetes.DeploymentTimeout = "180"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.Kubernetes.ServerSideApply.Enabled = "True"
            Octopus.Action.Kubernetes.ServerSideApply.ForceConflicts = "True"
            Octopus.Action.KubernetesContainers.CustomResourceYaml = <<-EOT
                apiVersion: apps/v1
                kind: Deployment
                metadata:
                  name: #{Template.Deployment.Name}-#{Octopus.Deployment.Id | ToLower}
                spec:
                  replicas: #{Template.Deployment.Replicas}
                  selector:
                    matchLabels:
                      component: #{Template.Labels.Component}
                      deployment: #{Octopus.Deployment.Id}
                  template:
                    metadata:
                      labels:
                        component: #{Template.Labels.Component}
                        deployment: #{Octopus.Deployment.Id}
                    spec:
                      containers:
                        - name: #{Template.Labels.Component}
                          image: #{Octopus.Action.Package[app-container].Image}
                          ports:
                            - containerPort: #{Template.Container.TargetPort}
                              name: #{Template.Container.PortName}
                
                EOT
            Octopus.Action.KubernetesContainers.CustomResourceYamlFileName = "template-scripts/kubernetes-blue-green/deployment.yml"
            Octopus.Action.KubernetesContainers.Namespace = "#{Template.Cluster.Namespace}"
            Octopus.Action.Script.ScriptSource = "Inline"
        }
        worker_pool_variable = ""

        packages "app-container" {
            acquisition_location = "NotAcquired"
            feed = "docker-hub"
            package_id = ""
            properties = {
                Extract = "False"
                PackageParameterName = "Template.Container"
                Purpose = ""
                SelectionMode = "deferred"
            }
        }
    }
}

step "create-preview-service" {
    name = "Create preview service"
    properties = {
        Octopus.Action.TargetRoles = "#{Template.Tag}"
    }

    action {
        action_type = "Octopus.KubernetesDeployRawYaml"
        properties = {
            Octopus.Action.Kubernetes.DeploymentTimeout = "180"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.Kubernetes.ServerSideApply.Enabled = "True"
            Octopus.Action.Kubernetes.ServerSideApply.ForceConflicts = "True"
            Octopus.Action.KubernetesContainers.CustomResourceYaml = <<-EOT
                apiVersion: v1
                kind: Service
                metadata:
                  name: #{Template.Service.Name}-preview
                  labels:
                    component: #{Template.Labels.Component}
                spec:
                  type: ClusterIP
                  selector:
                    component: #{Template.Labels.Component} 
                    deployment: #{Octopus.Deployment.Id}
                  ports:
                    - port: #{Template.Service.PreviewPort}
                      targetPort: #{Template.Container.PortName}
                
                EOT
            Octopus.Action.KubernetesContainers.CustomResourceYamlFileName = "template-scripts/kubernetes-blue-green/preview-service.yml"
            Octopus.Action.KubernetesContainers.Namespace = "#{Template.Cluster.Namespace}"
            Octopus.Action.Script.ScriptSource = "Inline"
        }
        worker_pool_variable = ""
    }
}

step "waiting-period" {
    name = "Waiting period"
    properties = {
        Octopus.Action.TargetRoles = "#{Template.Tag}"
    }

    action {
        action_type = "Octopus.Script"
        excluded_environments_variable = "#{Template.Environment.Production}"
        properties = {
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $seconds = $OctopusParameters["Template.Wait.Seconds"]
                
                Start-Sleep -Seconds $seconds
                
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool_variable = ""
    }
}

step "approval-swap" {
    name = "Approve swap"

    action {
        action_type = "Octopus.Manual"
        environments_variable = "#{Template.Environment.Production}"
        properties = {
            Octopus.Action.Manual.BlockConcurrentDeployments = "True"
            Octopus.Action.Manual.Instructions = "Approve canary phase 2"
            Octopus.Action.RunOnServer = "false"
        }
    }
}

step "create-service" {
    name = "Create service"
    properties = {
        Octopus.Action.TargetRoles = "#{Template.Tag}"
    }

    action {
        action_type = "Octopus.KubernetesDeployRawYaml"
        properties = {
            Octopus.Action.Kubernetes.DeploymentTimeout = "180"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.Kubernetes.ServerSideApply.Enabled = "True"
            Octopus.Action.Kubernetes.ServerSideApply.ForceConflicts = "True"
            Octopus.Action.KubernetesContainers.CustomResourceYaml = <<-EOT
                apiVersion: v1
                kind: Service
                metadata:
                  name: #{Template.Service.Name}
                  labels:
                    component: #{Template.Labels.Component}
                spec:
                  type: ClusterIP
                  selector:
                    component: #{Template.Labels.Component}
                    deployment: #{Octopus.Deployment.Id}
                  ports:
                    - port: #{Template.Service.Port}
                      targetPort: #{Template.Service.TargetPort}
                      name: #{Template.Service.PortName}
                
                EOT
            Octopus.Action.KubernetesContainers.CustomResourceYamlFileName = "template-scripts/kubernetes-blue-green/service.yml"
            Octopus.Action.KubernetesContainers.Namespace = "#{Template.Cluster.Namespace}"
            Octopus.Action.Script.ScriptSource = "Inline"
        }
        worker_pool_variable = ""
    }
}

step "scale-down-previous-deployment" {
    name = "Scale down previous deployment"
    properties = {
        Octopus.Action.TargetRoles = "#{Template.Tag}"
    }

    action {
        action_type = "Octopus.KubernetesRunScript"
        properties = {
            Octopus.Action.KubernetesContainers.Namespace = "#{Template.Cluster.Namespace}"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $ErrorActionPreference = "Continue"
                
                $deploymentName = $OctopusParameters["Template.Deployment.Name"]
                $previousDeployment = $OctopusParameters["Octopus.ProcessTemplate.Action[Get active deployment].Output.PreviousDeployment"]
                
                Write-Highlight "Scaling down $previousDeployment"
                
                kubectl scale --replicas 0 deployment/$previousDeployment
                
                $LastExitCode = 0
                
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool_variable = ""
    }
}